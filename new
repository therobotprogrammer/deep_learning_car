#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 25 13:43:44 2018

@author: pt
"""

import numpy as np
import keras

class DataGenerator(keras.utils.Sequence):
    'Generates data for Keras'
    def __init__(self, list_IDs, labels, batch_size=32, dim=(160,320), n_channels=3, shuffle=True):
        'Initialization'
        self.dim = dim
        self.batch_size = batch_size
        self.labels = labels
        self.list_IDs = list_IDs
        self.n_channels = n_channels
        self.shuffle = shuffle
        self.on_epoch_end()

    def __len__(self):
        'Denotes the number of batches per epoch'
        return int(np.floor(len(self.list_IDs) / self.batch_size))

    def __getitem__(self, index):
        'Generate one batch of data'
        # Generate indexes of the batch
        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]

        # Find list of IDs
        list_IDs_temp = [self.list_IDs[k] for k in indexes]

        # Generate data
        X, y = self.__data_generation(list_IDs_temp)

        return X, y

    def on_epoch_end(self):
        'Updates indexes after each epoch'
        self.indexes = np.arange(len(self.list_IDs))
        if self.shuffle == True:
            np.random.shuffle(self.indexes)

    def __data_generation(self, list_IDs_temp):
        
        'Generates data containing batch_size samples' # X : (n_samples, *dim, n_channels)
        # Initialization
        X = np.empty((self.batch_size, *self.dim, self.n_channels))
        y = np.empty((self.batch_size), dtype=int)

        # Generate data
        for i, ID in enumerate(list_IDs_temp):
            # Store sample
            X[i,] = np.load('data/' + ID + '.npy')

            # Store class
            y[i] = self.labels[ID]

        return X, keras.utils.to_categorical(y, num_classes=self.n_classes)
    
    
    
    
        
        batch_input_data_image_array = np.empty((self.batch_size, *self.dim, self.n_channels))
        batch_label_data = np.empty((self.batch_size), dtype=int)
        
        
        batch_input_data = self.input_data_set[idx * self.batch_size:(idx + 1) * self.batch_size]
        batch_label_data = self.labels_set[idx * self.batch_size:(idx + 1) * self.batch_size]

        #self.id_list.append[idx]
    
        for i, file_name in enumerate(batch_input_data):
            #self.imagename_list.insert[0,file_name]            
            print((file_name))
            #np.array[resize(imread(file_name), (160, 320))]
            batch_input_data_image_array[i] = cv2.imread(file_name)
            #print (type(im))
            #print(im.shape)
            
        
        return batch_input_data_image_array, np.array(batch_label_data)
    
    




    
def strip_filenames(old_path):
    old_path = old_path.split("\\") #handles windows generated files
    *directory, filename = old_path        
    directory, filename = os.path.split(filename) #handles linux generated files
    return("/" + filename) 
    

def update_driving_log(data_dir):    
    driving_log_csv = data_dir + '/' + 'driving_log.csv'
    new_image_path = data_dir + '/IMG'
    driving_log_pd = pd.read_csv(driving_log_csv)
    driving_log_pd_temp = driving_log_pd.iloc[:,0:3]    
    driving_log_pd_temp = driving_log_pd_temp.applymap(strip_filenames)
    driving_log_pd_temp = new_image_path + driving_log_pd_temp.astype(str)    
    driving_log_pd.iloc[:,0:3] = driving_log_pd_temp  
    
    driving_log_pd.columns = ['center','left', 'right', 'x','y','z','steering']
    
    driving_log_pd.to_csv(driving_log_csv, index = False, header = False)    
    
    
    return driving_log_pd


data_dir = '/home/pt/Desktop/data'

driving_log = update_driving_log(data_dir)






batch_size = 5

params = {
          'dim': (160,320),
          'batch_size': 16,
          'n_channels': 3,
          'shuffle': True,
         }

test = DataGenerator(driving_log['center'], driving_log['steering'], **params) #why **


iterator = test.__iter__()

batch = next(iterator)